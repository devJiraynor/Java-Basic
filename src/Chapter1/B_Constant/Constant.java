package Chapter1.B_Constant;

//# 상수 
//? 데이터를 보관할 수 있는 공간 하지만 한번 초기화 한 후에는 변경이 불가능
//? 변수를 열려있는 상자라고 한다면 상수는 열려있는 상자를 만들고 물건을 넣은 후 동봉한 것이라 할 수 있음

//? 일반적으로 변경하면 안되는 데이터를 지정할 때나
//? 데이터에 이름을 부여하고 싶을 때 사용

//? 상수 또한 반드시 초기화 한 후 사용 할 수 있음

//# 리터럴 상수 
//? 데이터 그 자체를 나타냄
public class Constant {
    public static void main(String[] args) {
        //! 상수 선언 방법
        //? final 데이터타입 상수명;
        final int NUMBER;

        //! 상수 초기화 방법
        //? 상수명 = 데이터;
        NUMBER = 10;

        //! 상수는 한번 초기화 한 후 변경 불가능
        // NUMBER = 12;

        //! 선언과 동시에 초기화
        //? final 데이터타입 상수명 = 데이터;
        final double PIE = 3.14;

        //! 상수 명명 규칙
        //? UPPER_SNAKE_CASE
        //? 모두 대문자로 작성하고 띄어쓰기는 _로 표기함
        //? 자바 변수는 UPPER_SNAKE_CASE를 따르는것이 개발자간의 암묵적인 룰

        //! 리터럴 상수
        //? 프로그래밍 언어에는 데이터를 담아두는 상수와 리터럴 상수가 존재함
        //? 리터럴 상수는 데이터 그 자체를 의미
        //? 위의 코드에서 final double PIE = 3.14;에서 
        //? final은 PIE라는 데이터를 담는 공간을 상수로 지정해주는 제어자
        //? doulbe은 PIE라는 데이터를 담는 공간의 모양과 크기를 지정해주는 데이터 타입
        //? PIE는 데이터를 담는 공간의 이름
        //? = 는 좌항에 우항을 대입하겠다는 연산자
        //? 3.14는 데이터 그 자체 즉, 이 부분이 '리터럴 상수'
        //? ; 은 해당 구문이 끝났음을 컴파일러에게 알려주는 키워드
    }
}
